#!/usr/bin/env python3

import sys
import subprocess
import configparser
import json
import os
from os.path import expanduser

sys.path.append(expanduser('~') + '/bin/python-modules')
import create

config_location = expanduser('~/.conf')

config = configparser.ConfigParser()
config.read(config_location)

gconfig = json.loads(config['general']['gconfig'])


def get_args():
    """ Get command line arguments """

    import argparse
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="subparser")

    edit_parser = subparsers.add_parser('edit')
    edit_parser.add_argument("program", type=str)
    edit_parser.add_argument("file", nargs='?', default=None, type=str)
    edit_parser.add_argument("--noadd", action="store_true", default=False, help="Don't stage file for commit in git")
    edit_parser.add_argument("--commit", action="store_true", default=False, help="Commit after quitting")

    git_parser = subparsers.add_parser('git')
    git_parser.add_argument("command", nargs='*')

    set_parser = subparsers.add_parser('set')
    set_parser.add_argument("program", type=str)
    set_parser.add_argument("type", type=str, choices=['default', 'directory'])
    set_parser.add_argument("value", type=str)

    read_parser = subparsers.add_parser('read')
    read_parser.add_argument('program')
    read_parser.add_argument("file", nargs='?', default=None, type=str)

    ls_parser = subparsers.add_parser('ls')
    ls_parser.add_argument('program')
    return parser.parse_args()


def main(args):
    """ Entry point for script """

    if args.subparser == "edit":
        return edit(args)
    elif args.subparser == "git":
        return git(args)
    elif args.subparser == "set":
        set_program(args)
    elif args.subparser == "read":
        read_config(args)
    elif args.subparser == "ls":
        list_files(args)

def list_files(args):
    if args.program in config:
        subprocess.run(['ls', '-hal', config[args.program]['directory']])
    else:
        subprocess.run(['ls','-hal', expanduser('~/.config/' + args.program)])

def read_config(args):
    filepath = get_filepath(args)
    with open(filepath) as file:
        content = file.read()
    print(content)

def set_program(args):
    if args.program not in config:
        config[args.program] = {}
    config[args.program][args.type] = args.value

    with open(config_location, 'w') as file:
        config.write(file)

def git(args):
    subprocess.run(gconfig + args.command)

def get_filepath(args):
    if args.program in config:
        if args.file:
            filepath = expanduser(config[args.program]['directory'] + '/' + args.file)
        else:
            filepath = expanduser(config[args.program]['default'])
    else:
        directory = expanduser("~/.config/" + args.program)
        if args.file:
            filepath = directory + "/" + args.file
        else:
            filepath = directory + "/config"
        if not os.path.exists(filepath):
            create_path = input("File not found. Create? (y/N) ")
            if create_path.lower() in ['y', 'yes']:
                create_path = True
            else:
                create_path = False

            if create_path:
                create.create(filepath)

    return filepath

def edit(args):
    filepath = get_filepath(args)
    subprocess.run([os.environ["EDITOR"], filepath])
    if not args.noadd or args.commit:
        subprocess.run(gconfig + ['add', filepath])
    if args.commit:
        subprocess.run(gconfig + ['add', filepath])
    return 0


if __name__ == '__main__':
    try:
        sys.exit(main(get_args()))
    except KeyboardInterrupt:
        sys.exit(0)
