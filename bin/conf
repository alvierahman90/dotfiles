#!/usr/bin/env python3

import sys
import subprocess
import configparser
import json
import os
from os.path import expanduser

sys.path.append(expanduser('~') + '/bin/python-modules')
import create

config_location = expanduser('~/.conf')

config = configparser.ConfigParser()
config.read(config_location)

gconfig = json.loads(config['general']['gconfig'])

git_shortcuts = [ "diff", "push", "status", "add", "reset", "rm" ]

def get_args():
    """ Get command line arguments """

    import argparse
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="subparser")

    edit_parser = subparsers.add_parser('edit', aliases='e')
    edit_parser.add_argument("program", type=str)
    edit_parser.add_argument("type", nargs="?", default=None, type=str)
    edit_parser.add_argument("--noadd", action="store_true", default=False, help="Don't stage file for commit in git")
    edit_parser.add_argument("--commit", action="store_true", default=False, help="Commit after quitting")

    git_parser = subparsers.add_parser('git', aliases='g')
    git_parser.add_argument("command", nargs='*')

    read_parser = subparsers.add_parser('read', aliases='r')
    read_parser.add_argument("program", type=str)
    read_parser.add_argument("type", nargs="?", default=None, type=str)
    read_parser.add_argument("value", type=str)

    set_parser = subparsers.add_parser('set', aliases='s')
    set_parser.add_argument("program", type=str)
    set_parser.add_argument("type", nargs="?", default=None, type=str)
    set_parser.add_argument("value", type=str)

    ls_parser = subparsers.add_parser('ls', aliases='l')
    ls_parser.add_argument('program')

    for shortcut in git_shortcuts:
        shortcut_parser = subparsers.add_parser(shortcut)
        shortcut_parser.add_argument("command", nargs='*')

    commit_parser = subparsers.add_parser('commit')
    commit_parser.add_argument("command", nargs='*')

    return parser.parse_args()


def main(args):
    """ Entry point for script """

    if args.subparser == "edit" or args.subparser == 'e':
        return edit(args)
    elif args.subparser == "git" or args.subparser == 'g':
        return git(args)
    elif args.subparser == "set" or args.subparser == 's':
        set_program(args)
    elif args.subparser == "read" or args.subparser == 'r':
        read_config(args)
    elif args.subparser == "ls" or args.subparser == 'l':
        list_files(args)
    elif args.subparser in git_shortcuts:
        git(args, prefix=[args.subparser])
    elif args.subparser == "commit":
        git(args, prefix=["commit", "-m"])

def list_files(args):
    if args.program in config:
        subprocess.run(['ls', '-hal', config[args.program]['directory']])
    else:
        subprocess.run(['ls','-hal', expanduser('~/.config/' + args.program)])

def read_config(args):
    filepath = get_filepath(args)
    with open(filepath) as file:
        content = file.read()
    print(content)

def set_program(args):
    if args.program not in config:
        config[args.program] = {}
    config[args.program][args.type] = args.value

    with open(config_location, 'w') as file:
        config.write(file)

def git(args, prefix=[]):
    subprocess.run(gconfig + prefix + args.command)

def get_filepath(args):
    if '/' in args.program:
        program = args.program.split("/")[0]
        file = '/'.join(args.program.split("/")[1:])
    else:
        program = args.program
        file=False

    # if there is a custom shortcut set by user
    if program in config:
        if args.type:
            filepath = expanduser(config[program][args.type])
        elif file:
            filepath = expanduser(config[program]['directory'] + '/' + file)
        else:
            filepath = expanduser(config[program]['default'])
    else:
        directory = expanduser("~/.config/" + program)
        # send the filename in the arguments PROGRAM/FILENAME
        if file:
            filepath = directory + "/" + file
        else:
            filepath = directory + "/config"
        if not os.path.exists(filepath):
            create_path = input(f"File '{filepath}' not found. Create? (y/N) ")
            if create_path.lower() in ['y', 'yes']:
                create_path = True
            else:
                return False
            create.create(filepath)
    
    print(f"Filepath: {filepath}")
    return filepath

def edit(args):
    filepath = get_filepath(args)
    if filepath:
        print("Editing " + filepath)
        subprocess.run([os.environ["EDITOR"], filepath])
    return 0


if __name__ == '__main__':
    try:
        sys.exit(main(get_args()))
    except KeyboardInterrupt:
        sys.exit(0)
